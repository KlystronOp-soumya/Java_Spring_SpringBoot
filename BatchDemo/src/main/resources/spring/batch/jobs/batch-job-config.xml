<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd">
	<import
		resource="classpath:/spring/batch/config/spring-context.xml" />
	<context:component-scan
		base-package="org.springframework.jdbc.datasource" />
	<!-- Adding the beans -->
	<!-- Add the tasklet implementation as dependency -->
	<!-- the service and Dao bean -->
	<bean id="checkDatabaseConn"
		class="com.demo.batch.Util.CheckDBConn" />
	<bean id="agentSrvc"
		class="com.demo.batch.BatchDemo.services.impl.AgentBonusImpl" />
	<bean id="agentBonusDao"
		class="com.demo.batch.BatchDemo.DAO.impl.AgentBonusDAOImpl">
		<!-- Setter for the DataSource -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="initAndClearDao"
		class="com.demo.batch.BatchDemo.DAO.impl.InitializeAndClearDAOImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="initAndClearSrvce"
		class="com.demo.batch.BatchDemo.services.impl.InitAndClearService">
		<property name="initAndClrDao" ref="initAndClearDao" />
	</bean>
	<bean id="formatterLineAggregator"
		class="org.springframework.batch.item.file.transform.FormatterLineAggregator">
		<property name="fieldExtractor">
			<bean
				class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
				<property name="names"
					value="agtId,name,designation,LOB,bonusAmt,bonusPerct,bonusPayout,calDay,calMonth,calYear,qualifStatus" />
			</bean>
		</property>
		<property name="format"
			value="%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" />
	</bean>
	<!-- Tasklet Beans -->
	<bean id="helloWorld"
		class="com.demo.batch.BatchDemo.tasklets.HelloWorld" scope="step" />
	<bean id="agentReportGen"
		class="com.demo.batch.BatchDemo.tasklets.AgentReportGenerator"
		scope="step">
		<property name="agentBonusService" ref="agentSrvc" />
	</bean>
	<bean id="intializeAndClearTask"
		class="com.demo.batch.BatchDemo.tasklets.InitializeAndClearDB"
		scope="step">
		<constructor-arg ref="initAndClearSrvce" />
	</bean>
	<!-- Beans Section End -->
	<!-- RowMapper -->
	<bean id="customAgentDtlsRowMapper"
		class="com.demo.batch.BatchDemo.mappers.AgentDtlsRowMapper" />
	<bean id="customAgentBnsQualifRowMapper"
		class="com.demo.batch.BatchDemo.mappers.AgentBnsQualifRowMapper" />
	<!-- Injecting the custom item reader -->
	<bean id="customAgentDetailsReader"
		class="com.demo.batch.BatchDemo.readers.CustomAgtDtlsReader">
		<!-- <property name="rowMapper" ref="customAgentDtlsRowMapper" /> -->
	</bean>
	<bean id="customAgtBnsQualifReader"
		class="com.demo.batch.BatchDemo.readers.CustomeAgtBnsDetailsReader" />
	<!-- Inject the custom item processor -->
	<bean id="customAgtBnsProcessor"
		class="com.demo.batch.BatchDemo.processors.CustomAgtBnsProcessor">
	</bean>
	<!-- Inject the custome item writer -->
	<bean id="customAgtDtlsWriter"
		class="com.demo.batch.BatchDemo.writers.CustomAgtBnsWriter">
		<constructor-arg ref="dataSource" />
	</bean>
	<bean id="customAgtBnsQlfFileWriter"
		class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource">
				<constructor-arg value="${bonus_result_path}" />
			</bean>
		</property>
		<property name="lineAggregator" ref="formatterLineAggregator" />
		<property name="shouldDeleteIfExists" value="true" />
	</bean>
	<!-- Listeners -->
	<bean id="customJobListener"
		class="com.demo.batch.BatchDemo.listeners.CustomJobLoggerListener" />
	<bean id="customStepListener"
		class="com.demo.batch.BatchDemo.listeners.StepListener" />
	<bean id="customReaderListener"
		class="com.demo.batch.BatchDemo.listeners.CustomItemReaderListener" />
	<bean id="customProcessorListener"
		class="com.demo.batch.BatchDemo.listeners.CustomItemProcessorListener" />
	<bean id="customWriterListener"
		class="com.demo.batch.BatchDemo.listeners.CustomItemWriterListener" />
	<bean id="agentReportGenListener"
		class="com.demo.batch.BatchDemo.listeners.AgentReportGenerationListener" />
	<!-- Job parameter validator -->
	<bean id="customJobParameterValidator"
		class="com.demo.batch.BatchDemo.validator.CustomJobParameterValidator" />
	<!-- <batch:job id="firstJob"> <batch:step id="step1" parent="helloWorldStep"></batch:step> 
		</batch:job> -->
	<!-- Add Step that would Generate a Excel report after successfull step 
		complition -->
	<batch:step id="helloWorldStep">
		<batch:tasklet ref="helloWorld" /> <!-- refers to the takslets which falls under the step-helloworld -->
	</batch:step>
	<batch:step id="initializeClear_step">
		<batch:tasklet ref="intializeAndClearTask" />
	</batch:step>
	<batch:step id="excelReportGen">
		<batch:tasklet ref="agentReportGen" />
	</batch:step>
	<batch:step id="flatFileWriting">
		<batch:tasklet>
			<batch:chunk reader="customAgtBnsQualifReader"
				writer="customAgtBnsQlfFileWriter" commit-interval="10"
				cache-capacity="100" />
		</batch:tasklet>
	</batch:step>
	<batch:job id="agentBonusCalculation">
		<batch:validator ref="customJobParameterValidator" />
		<batch:step id="initialize_clear_step1"
			parent="initializeClear_step" next="calculateBonus_Step2">
			<batch:listeners>
				<batch:listener ref="customJobListener" />
				<batch:listener ref="customStepListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="calculateBonus_Step2" next="reportGen_Step3">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="customAgentDetailsReader"
					processor="customAgtBnsProcessor" writer="customAgtDtlsWriter"
					commit-interval="5"></batch:chunk>
				<batch:listeners>
					<batch:listener ref="customJobListener" />
					<batch:listener ref="customStepListener" />
					<batch:listener ref="customReaderListener" />
					<batch:listener ref="customProcessorListener" />
					<batch:listener ref="customWriterListener" />
				</batch:listeners>
			</batch:tasklet>
		</batch:step>
		<!-- After Calculation of the Previous step this Step will be executed -->
		<batch:step id="reportGen_Step3" parent="excelReportGen"
			next="agentQualifFileWrite_Step4">
			<batch:listeners>
				<batch:listener ref="agentReportGenListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="agentQualifFileWrite_Step4"
			parent="flatFileWriting">
			<batch:listeners>
				<batch:listener ref="customJobListener" />
				<batch:listener ref="customStepListener" />
			</batch:listeners>
		</batch:step>
	</batch:job>
	<!-- Add Jobs that populates data CSV/FILE to DB and Vice Versa -->
</beans>