<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jdbc 
		http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- In order to use the annotation based configuration -->
	<tx:annotation-driven
		transaction-manager="txManager" />
	<context:annotation-config />
	<!-- Import the DB properties -->
	<context:property-placeholder
		location="classpath:database/db-config.properties" />
		
	<!-- Configure here normal DataSource -->
	<!-- connect to database MYSQL -->
	<!-- <bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${mysql.driver}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.user}" />
		<property name="password" value="${mysql.password}" />
	</bean> -->


	<!-- connect to database H2 -->
	<!-- <bean id="dataSourceH2"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${h2.driver}" />
		<property name="url" value="${h2.url}" />
		<property name="username" value="${h2.user}" />
		<property name="password" value="${h2.password}" />
	</bean> -->
	
	<!-- Configure here HikariCp -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP" />
		<property name="connectionTestQuery"
			value="SELECT 1 FROM DUAL" />
		<property name="jdbcUrl" value="${h2.url}" />
		<property name="username" value="${h2.user}" />
		<property name="password" value="${h2.password}" />
		<!-- <property name="dataSourceClassName"
			value="${mysql.datasource}" /> -->
		<property name="maximumPoolSize" value="100" />
		<property name="idleTimeout" value="10" />

		<property name="dataSourceProperties">
			<props>
				<prop key="url">${h2.url}</prop>
				<prop key="user">${h2.user}</prop>
				<prop key="password">${h2.password}</prop>
			</props>
		</property>
	</bean>

	<!-- HikariCP configuration -->
	<bean id="hikariDataSource"
		class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<!-- Transaction Manager For JDBC -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- <property name="dataSource" ref="dataSource" /> -->
		<property name="dataSource" ref="hikariDataSource"/>
	</bean>

	<!-- Add JdbcTemplate as the bean -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<!-- <constructor-arg ref="dataSource" /> -->
		<constructor-arg ref="hikariDataSource"/>
	</bean>

	<!-- NamedJdbcTemplate as bean -->
	<bean id="namedJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<!-- <constructor-arg ref="dataSource" /> -->
		<constructor-arg ref="hikariDataSource"/>
	</bean>
	
	<!-- Configure here jdbc:initalize-script for MySQL -->
	<!-- <jdbc:initialize-database data-source="dataSource"> <jdbc:script location="classpath:database/create_drop.sql" 
		separator=";" /> <jdbc:script location="classpath:database/schema.sql" separator=";" 
		/> </jdbc:initialize-database> -->

	<!-- Commenting out the initialization since it is not taking the DB config 
		defined in the props file -->
	<!-- For H2 -->
	<!-- <jdbc:embedded-database id="dataSourceH2" type="H2" generate-name="false" 
		database-name="sampledata"> <jdbc:script location="classpath:database/create_drop.sql" 
		separator=";" /> <jdbc:script location="classpath:database/schema.sql" separator=";" 
		/> </jdbc:embedded-database> -->
		
	<!-- Configure here ResourcePopulator Populates, initializes, or cleans 
		up a database using SQL scripts defined in external resources. -->
	<bean id="databasePopulator"
		class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator" />
</beans>